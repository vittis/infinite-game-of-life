{"version":3,"sources":["grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Grid","grid","onSend","style","display","gridTemplateColumns","numCols","map","rows","i","col","k","key","onClick","width","height","backgroundColor","undefined","border","convertTo2dArray","arr","copy","newArr","length","push","splice","sliderGenRef","App","useState","secondsLeft","setSecondsLeft","room","setRoom","gridToShow","setGridToShow","displayGeneration","setDisplayGeneration","lastGrid","setLastGrid","lastGeneration","setLastGeneration","running","setRunning","allGens","setAllGens","useEffect","Client","joinOrCreate","then","onStateChange","state","board","generation","onMessage","timer","Date","toISOString","substr","catch","e","console","log","interval","setInterval","counter","clearInterval","useCallback","send","className","type","min","max","step","value","onChange","Number","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c2c589bc.chunk.js","sourcesContent":["import React from 'react';\nimport { numCols } from './App';\n\nconst Grid = ({ grid, onSend }: { grid: number[][]; onSend: any }) => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      }}\n    >\n      {grid.map((rows, i) =>\n        rows.map((col, k) => (\n          <div\n            key={`${i}-${k}`}\n            onClick={() => {\n              onSend({ i, k });\n            }}\n            style={{\n              width: 20,\n              height: 20,\n              backgroundColor: grid[i][k] ? 'pink' : undefined,\n              border: 'solid 1px #444'\n            }}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Grid;\n","/* eslint-disable no-restricted-globals */\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Client, Room } from 'colyseus.js';\nimport Grid from './grid';\nimport { FaPlay, FaPause } from 'react-icons/fa';\n\nexport const numRows = 19;\nexport const numCols = 19;\n\nexport function convertTo2dArray(arr: number[]) {\n  const copy = [...arr];\n  const newArr: number[][] = [];\n  while (copy.length) newArr.push(copy.splice(0, numCols));\n  return newArr;\n}\n\nlet sliderGenRef = 0\n\nfunction App() {\n  const [secondsLeft, setSecondsLeft] = useState<string>('');\n  const [room, setRoom] = useState<Room | undefined>();\n\n  const [gridToShow, setGridToShow] = useState<number[][]>();\n  const [displayGeneration, setDisplayGeneration] = useState(0);\n\n  const [lastGrid, setLastGrid] = useState<number[][]>();\n  const [lastGeneration, setLastGeneration] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const [allGens, setAllGens] = useState<{ board: number[]; generation: number }[]>([]);\n\n  useEffect(() => {\n    const client = new Client('ws://167.172.126.142');\n\n    client\n      .joinOrCreate('life_room')\n      .then((room) => {\n        setRoom(room);\n        room.onStateChange((state: any) => {\n          setLastGrid(convertTo2dArray(state.board));\n          setGridToShow(convertTo2dArray(state.board));\n          setLastGeneration(state.generation);\n          setDisplayGeneration(state.generation);\n          setRunning(false);\n        });\n        room.onMessage('tick', (timer) => {\n          setSecondsLeft(new Date(timer * 1000).toISOString().substr(14, 5));\n        });\n        room.onMessage('receive_all', ({ allGens, state }) => {\n          setAllGens(allGens);\n          setLastGrid(convertTo2dArray(state.board));\n          setGridToShow(convertTo2dArray(state.board));\n          setDisplayGeneration(state.generation);\n          setLastGeneration(state.generation);\n          setRunning(false);\n        });\n      })\n      .catch((e) => {\n        console.log('JOIN ERROR', e);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (allGens && displayGeneration !== lastGeneration && allGens[displayGeneration - 1]) {\n      setGridToShow(convertTo2dArray(allGens[displayGeneration - 1].board));\n    } else if (displayGeneration === lastGeneration) {\n      setGridToShow(lastGrid);\n    }\n  }, [displayGeneration, lastGeneration]);\n\n  const run = () => {\n    setRunning(!running);\n  };\n\n  useEffect(() => {\n    sliderGenRef = displayGeneration;\n    const interval = setInterval(() => {\n      if (sliderGenRef !== lastGeneration) {\n        setDisplayGeneration((counter) => counter + 1);\n        sliderGenRef += 1;\n      } else {\n        clearInterval(interval);\n        setRunning(false);\n      }\n    }, 30);\n    if (!running) {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [running]);\n\n  const onSend = useCallback(\n    ({ i, k }) => {\n      if (displayGeneration === lastGeneration) {\n        room?.send('click', { i, k });\n      }\n    },\n    [room, displayGeneration, lastGeneration]\n  );\n\n  if (!gridToShow) {\n    return <div>loading</div>;\n  }\n  return (\n    <div className=\"my-5 flex flex-col w-full items-center\">\n      <div className=\"flex items-center\">\n        <div className=\"text-2xl font-bold mb-2\">Infinite Game of Life </div>\n      </div>\n      <div className=\"mb-1 flex flex-col-reverse\">\n        <div className=\"mt-1 flex flex-col items-center\">\n          <div className=\"flex items-center\">\n            <input\n              className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-full\"\n              type=\"range\"\n              min=\"0\"\n              max={lastGeneration}\n              step=\"1\"\n              value={displayGeneration}\n              onChange={(e) => setDisplayGeneration(Number.parseInt(e.target.value))}\n            />\n            <button\n              onClick={run}\n              className=\"ml-3 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-1 px-4 border border-gray-400 rounded shadow\"\n            >\n              {!running ? <FaPlay /> : <FaPause />}\n            </button>\n          </div>\n        </div>\n        <div className=\"m-1 p-2 border border-gray-600 rounded\">\n          Next generation in: <span className=\"font-bold\">{secondsLeft}</span>\n        </div>\n      </div>\n      <div className=\"mb-3\">\n        Viewing generation: <b>{displayGeneration}</b>\n      </div>\n      {gridToShow && <Grid grid={gridToShow} onSend={onSend} />}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}