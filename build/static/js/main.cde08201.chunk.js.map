{"version":3,"sources":["grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","memo","grid","onSend","style","display","gridTemplateColumns","numCols","map","rows","i","col","k","key","onClick","width","height","backgroundColor","undefined","border","convertTo2dArray","arr","copy","newArr","length","push","splice","sliderGenRef","App","useState","setGrid","generation","setGeneration","secondsLeft","setSecondsLeft","room","setRoom","sliderGen","setSliderGen","allGens","setAllGens","currentState","setCurrentState","running","setRunning","useEffect","interval","setInterval","counter","clearInterval","Client","joinOrCreate","then","onStateChange","state","board","onMessage","timer","Date","toISOString","substr","catch","e","console","log","useCallback","send","className","type","min","max","step","value","onChange","Number","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cde08201.chunk.js","sourcesContent":["import React from 'react';\nimport { numCols } from './App';\n\nconst Grid = ({ grid, onSend }: { grid: number[][]; setGrid: any; onSend: any }) => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      }}\n    >\n      {grid.map((rows, i) =>\n        rows.map((col, k) => (\n          <div\n            key={`${i}-${k}`}\n            onClick={() => {\n              onSend({ i, k });\n            }}\n            style={{\n              width: 20,\n              height: 20,\n              backgroundColor: grid[i][k] ? 'pink' : undefined,\n              border: 'solid 1px #444'\n            }}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(Grid);\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Client, Room } from 'colyseus.js';\nimport Grid from './grid';\nimport { FaPlay, FaPause } from 'react-icons/fa';\n\nexport const numRows = 5;\nexport const numCols = 5;\n\nexport function convertTo2dArray(arr: number[]) {\n  const copy = [...arr];\n  const newArr = [];\n  while (copy.length) newArr.push(copy.splice(0, numCols));\n  return newArr;\n}\n\nlet sliderGenRef = 0;\n\nfunction App() {\n  const [grid, setGrid] = useState<number[][]>();\n  const [generation, setGeneration] = useState<number>(0);\n  const [secondsLeft, setSecondsLeft] = useState<string>('');\n  const [room, setRoom] = useState<Room | undefined>();\n  const [sliderGen, setSliderGen] = useState<number>(0);\n  const [allGens, setAllGens] = useState<any>();\n  const [currentState, setCurrentState] = useState<any>();\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    sliderGenRef = sliderGen;\n    const interval = setInterval(() => {\n      if (sliderGenRef !== generation) {\n        setSliderGen((counter) => counter + 1);\n        sliderGenRef += 1;\n      } else {\n        clearInterval(interval);\n        setRunning(false);\n      }\n    }, 25);\n    if (!running) {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [running]);\n\n  useEffect(() => {\n    setSliderGen(generation);\n  }, []);\n\n  useEffect(() => {\n    setSliderGen(generation);\n    if (running) setRunning(false);\n  }, [generation]);\n\n  useEffect(() => {\n    if (allGens) {\n      setAllGens([...allGens, currentState]);\n    }\n  }, [currentState, generation]); \n\n  useEffect(() => {\n    const client = new Client('ws://aqueous-ravine-97393.herokuapp.com');\n \n    client\n      .joinOrCreate('life_room')\n      .then((room) => {\n        setRoom(room);\n        room.onStateChange((state: any) => {\n          setCurrentState(state);\n          setGrid(convertTo2dArray(state.board));\n          setGeneration(state.generation);\n        });\n        room.onMessage('tick', (timer) => {\n          setSecondsLeft(new Date(timer * 1000).toISOString().substr(14, 5));\n        });\n        room.onMessage('receive_all', (allGens) => {\n          setAllGens(allGens);\n        });\n      })\n      .catch((e) => {\n        console.log('JOIN ERROR', e);\n      });\n  }, []);\n\n  const run = () => {\n    setRunning(!running);\n  };\n\n  const onSend = useCallback(\n    ({ i, k }) => {\n      if (generation === sliderGen) {\n        console.log('click')\n        room?.send('click', { i, k });\n      }\n    },\n    [room],\n  );\n\n  if (!grid) {\n    return <div>loading</div>;\n  }\n\n  return (\n    <div className=\"my-5 flex flex-col w-full items-center\">\n      <div className=\"flex items-center\">\n        <div className=\"text-2xl font-bold mb-2\">Infinite Game of Life </div>\n      </div>\n      <div className=\"mb-1 flex flex-col-reverse\">\n        <div className=\"mt-1 flex flex-col items-center\">\n          <div className=\"flex items-center\">\n            <input\n              className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-full\"\n              type=\"range\"\n              min=\"1\"\n              max={generation}\n              step=\"1\"\n              value={sliderGen}\n              onChange={(e) => setSliderGen(Number.parseInt(e.target.value))}\n            />\n            <button\n              onClick={run}\n              className=\"ml-3 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-1 px-4 border border-gray-400 rounded shadow\"\n            >\n              {!running ? <FaPlay /> : <FaPause />}\n            </button>\n          </div>\n        </div>\n        <div className=\"m-1 p-2 border border-gray-600 rounded\">\n          Next generation in: <span className=\"font-bold\">{secondsLeft}</span>\n        </div>\n      </div>\n      <div className=\"mb-3\">\n        Viewing generation: <b>{sliderGen}</b>\n      </div>\n      {allGens && allGens[sliderGen - 1] && (\n        <Grid grid={convertTo2dArray(allGens[sliderGen - 1].board)} setGrid={setGrid} onSend={onSend} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}